import streamlit as st
import os
import bcrypt
from openai import OpenAI
import numpy as np
import base64
import pytube
import os
import librosa
from pydub import AudioSegment
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.colors import Normalize
import tensorflow as tf
from statistics import mode
from tensorflow import keras
from keras import regularizers
from keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import (Conv2D, MaxPooling2D, Flatten, Dropout, Dense, Activation)
from streamlit_option_menu import option_menu
import time
import requests  # D√πng ƒë·ªÉ g·ª≠i y√™u c·∫ßu API
import asyncio 
import streamlit.components.v1 as components    
from auth import register_user
from streamlit_cookies_manager import CookieManager
import base64
import time
from tensorflow.keras.layers import (Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, 
                                     Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D,
                                     Dropout)
from tensorflow.keras.layers import BatchNormalization

def classify_music():
    st.markdown("<h1 style='text-align: center; color: white;'>Music Genre Recognition</h1>", unsafe_allow_html=True)

    # Upload file mp3
    st.write("## Upload an MP3 file to classify:")
    mp3_file = st.file_uploader("Upload an audio file", type=["mp3"], label_visibility="collapsed")    
    
    if mp3_file is not None:
        st.write("**Play the song below:**")
        st.audio(mp3_file, "audio/mp3")

        # H√†m chuy·ªÉn ƒë·ªïi MP3 sang WAV
        def convert_mp3_to_wav(music_file):  
            sound = AudioSegment.from_mp3(music_file)
            sound.export("music_file.wav", format="wav")

        # H√†m t·∫°o Mel Spectrogram
        def create_melspectrogram(wav_file):  
            y, sr = librosa.load(wav_file)  
            mel_spec = librosa.power_to_db(librosa.feature.melspectrogram(y=y, sr=sr))    
            plt.figure(figsize=(10, 5))
            plt.axes([0., 0., 1., 1.], frameon=False, xticks=[], yticks=[])
            librosa.display.specshow(mel_spec, x_axis="time", y_axis='mel', sr=sr)
            plt.margins(0)
            plt.savefig('melspectrogram.png')

        # X√¢y d·ª±ng m√¥ h√¨nh CNN
        def GenreModel(input_shape=(100,200,4), classes=10):
            classifier = Sequential()
            classifier.add(Conv2D(8, (3, 3), input_shape=input_shape, activation='relu'))
            classifier.add(MaxPooling2D(pool_size=(2, 2)))
            classifier.add(Conv2D(16, (3, 3), activation='relu'))
            classifier.add(MaxPooling2D(pool_size=(2, 2)))
            classifier.add(Conv2D(32, (3, 3), activation='relu'))
            classifier.add(MaxPooling2D(pool_size=(2, 2)))
            classifier.add(Conv2D(64, (3, 3), activation='relu'))
            classifier.add(MaxPooling2D(pool_size=(2, 2)))
            classifier.add(Conv2D(128, (3, 3), activation='relu'))
            classifier.add(MaxPooling2D(pool_size=(2, 2)))
            classifier.add(Flatten())
            classifier.add(Dropout(0.5))
            classifier.add(Dense(256, activation='relu', kernel_regularizer=regularizers.l2(0.0001)))
            classifier.add(Dropout(0.25))
            classifier.add(Dense(10, activation='softmax'))
            classifier.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
            return classifier

        # D·ª± ƒëo√°n th·ªÉ lo·∫°i nh·∫°c
        def predict(image_data, model):   
            image = img_to_array(image_data)   
            image = np.reshape(image, (1, 100, 200, 4))   
            prediction = model.predict(image / 255)   
            prediction = prediction.reshape((10,))     
            class_label = np.argmax(prediction)     
            return class_label, prediction

        # Nh√£n c·ªßa c√°c th·ªÉ lo·∫°i nh·∫°c
        class_labels = ['blues', 'classical', 'country', 'disco', 'hiphop', 'jazz', 'metal', 'pop', 'reggae', 'rock']

        # Load m√¥ h√¨nh
        model = GenreModel(input_shape=(100, 200, 4), classes=10)
        model.load_weights("music_genre_recog_model.h5")

        # Hi·ªáu ·ª©ng loading
        with st.spinner("üîç Analyzing music genre..."):
            time.sleep(2)

        # Chuy·ªÉn ƒë·ªïi file v√† t·∫°o spectrogram
        convert_mp3_to_wav(mp3_file)
        audio_full = AudioSegment.from_wav('music_file.wav')

        class_labels_total = []
        predictions_total = []
        for w in range(int(round(len(audio_full) / 3000, 0))):
            audio_3sec = audio_full[3 * (w) * 1000: 3 * (w + 1) * 1000]
            audio_3sec.export(out_f="audio_3sec.wav", format="wav")
            create_melspectrogram("audio_3sec.wav")
            image_data = load_img('melspectrogram.png', color_mode='rgba', target_size=(100, 200))   
            class_label, prediction = predict(image_data, model)
            class_labels_total.append(class_label)
            predictions_total.append(prediction)

        # L·∫•y th·ªÉ lo·∫°i c√≥ d·ª± ƒëo√°n cao nh·∫•t
        class_label_final = mode(class_labels_total)
        predictions_final = np.mean(predictions_total, axis=0)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.success(f"‚úÖ The genre of your song is: **{class_labels[class_label_final]}**")
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v·ªõi n·ªÅn t·ªëi
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v·ªõi n·ªÅn t·ªëi
        fig, ax = plt.subplots(figsize=(10, 5))

        # Thi·∫øt l·∫≠p m√†u n·ªÅn c·ªßa bi·ªÉu ƒë·ªì
        fig.patch.set_facecolor('#0E0808')  # M√†u n·ªÅn c·ªßa bi·ªÉu ƒë·ªì
        ax.set_facecolor('#0E0808')  # M√†u n·ªÅn c·ªßa tr·ª•c

        # Thi·∫øt l·∫≠p m√†u cho c√°c thanh trong bi·ªÉu ƒë·ªì
        ax.bar(class_labels, predictions_final, color=cm.viridis(np.linspace(0, 1, len(class_labels))))

        # Thi·∫øt l·∫≠p c√°c y·∫øu t·ªë hi·ªÉn th·ªã kh√°c
        ax.set_xlabel("Music Genre", color='white', fontsize=16)  # M√†u ch·ªØ cho tr·ª•c X v√† c·ª° ch·ªØ
        ax.set_ylabel("Prediction Probability", color='white', fontsize=16)  # M√†u ch·ªØ cho tr·ª•c Y v√† c·ª° ch·ªØ
        ax.set_title("Genre Prediction Probability Distribution", color='white', fontsize=18)  # M√†u ch·ªØ cho ti√™u ƒë·ªÅ v√† c·ª° ch·ªØ

        # Thi·∫øt l·∫≠p c√°c nh√£n tr·ª•c X v·ªõi ch·ªØ kh√¥ng in ƒë·∫≠m v√† k√≠ch th∆∞·ªõc ch·ªØ l·ªõn h∆°n
        ax.set_xticklabels(class_labels, rotation=45, color='white', fontsize=14)

        # X√≥a c√°c ƒë∆∞·ªùng k·∫ª √¥ (gridlines)
        ax.grid(False)

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
        st.pyplot(fig)




