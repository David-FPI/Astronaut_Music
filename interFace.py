import streamlit as st
st.set_page_config(page_title="Music AI Website", layout="wide")
import os
import bcrypt
import re  # Th√™m th∆∞ vi·ªán ki·ªÉm tra email h·ª£p l·ªá
from openai import OpenAI
import numpy as np
import base64
import pytube
import os
import subprocess 
import librosa
import tempfile 
from pydub import AudioSegment
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.colors import Normalize
import tensorflow as tf
from statistics import mode
from tensorflow import keras
from keras import regularizers
from keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import (Conv2D, MaxPooling2D, Flatten, Dropout, Dense, Activation)
from streamlit_option_menu import option_menu
import time
from dotenv import load_dotenv
from supabase import create_client, Client
import requests  # D√πng ƒë·ªÉ g·ª≠i y√™u c·∫ßu API
import asyncio 
import streamlit.components.v1 as components    
from auth import register_user
from streamlit_cookies_manager import CookieManager
import base64
import logging
import time
import hmac
import hashlib
import uuid
import pandas as pd
from datetime import datetime, timedelta
from home import show_home
from create_lyrics import create_lyrics
from feel_the_beat import Feel_The_Beat
from classify import classify_music
from library import show_library
from payment import manage_payment

# Load API key t·ª´ file .env
load_dotenv()
#openai.api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY")
)
api_token = os.getenv("SUNO_API_TOKEN")

# K·∫øt n·ªëi Supabase
SUPABASE_URL = st.secrets["SUPABASE_URL"]
SUPABASE_KEY = st.secrets["SUPABASE_KEY"]

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

print(os.path.exists("D:/test/Music-Genre-Recognition-main/.streamlit/secrets.toml"))

# C·∫•u h√¨nh logging - L∆∞u c√°c l·ªói v√†o file 'app.log'
logging.basicConfig(filename='app.log', level=logging.ERROR, format='%(asctime)s - %(message)s')
# # M√¥ ph·ªèng toggle switch b·∫±ng checkbox
# toggle_state = st.checkbox("Enable feature")
def st_toggle_switch(
    label,
    key,
    default_value=False,
    label_after=False,
    active_color="#4CAF50",      # M√†u b·∫≠t
    inactive_color="#888",       # M√†u t·∫Øt
    track_color="#ccc"           # M√†u n·ªÅn
):
    _ = active_color, inactive_color, track_color  # ƒê√°nh d·∫•u l√† ƒë√£ d√πng
    toggle_value = st.toggle(
        label if not label_after else "",
        value=default_value,
        key=key,
    )

    if label_after:
        st.write(f"**{label}**")

    return toggle_value

# H√†m ghi l·ªói v√†o log
def log_error(message):
    """Ghi l·ªói v√†o file log v√† hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng."""
    logging.error(message)  # Ghi l·ªói v√†o file log
    st.error(f"üö® L·ªói x·∫£y ra: {message}")  # Hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng

def generate_lyrics(prompt):
    """G·ª≠i prompt ƒë·∫øn OpenAI API ƒë·ªÉ t·∫°o l·ªùi b√†i h√°t"""
    try:
        response = client.chat.completions.create(
            model="gpt-4o",  # Ho·∫∑c "gpt-3.5-turbo" n·∫øu t√†i kho·∫£n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p GPT-4
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt nh·∫°c sƒ© s√°ng t√°c l·ªùi b√†i h√°t chuy√™n nghi·ªáp."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.9,
            max_tokens=900
        )

        # ‚úÖ L·∫•y n·ªôi dung ph·∫£n h·ªìi ƒë√∫ng c√°ch
        return response.choices[0].message.content  

    except Exception as e:
        return f"‚ö†Ô∏è L·ªói khi t·∫°o l·ªùi b√†i h√°t: {str(e)}"

# CSS n√¢ng cao cho giao di·ªán
st.markdown(
    """
    <style>
        /* Thi·∫øt l·∫≠p n·ªÅn v√† font ch·ªØ chung */
        body, .stApp {
            # background: linear-gradient(135deg, #0E0808 0%, #1A1A1A 100%) !important;
            background: url("https://i.imgur.com/vzl5Tex.png") no-repeat center center fixed;
            background-size: cover !important;
            font-family: 'Roboto', sans-serif;
            color: #FFFFFF;
        }

        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 10px;
            background: rgba(0, 0, 0, 0.1);
        }
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(45deg, #ff7e5f, #feb47b);
            border-radius: 10px;
        }
        
        /* Sidebar styling */
        [data-testid="stSidebar"] {
            background: rgba(10, 10, 10, 0.8) !important;
            backdrop-filter: blur(10px);
            border-right: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 5px 0 15px rgba(0, 0, 0, 0.2);
        }
        [data-testid="stSidebar"] .css-1d391kg {
            padding-top: 2rem;
        }
        
        /* Header styles */
        h1, h2, h3 {
            background: linear-gradient(90deg, #ff7e5f, #feb47b);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: 700;
        }
        h1 {
            font-size: 2.5rem;
            margin-bottom: 1.5rem;
            text-align: center;
        }
        h2 {
            font-size: 1.8rem;
            margin-top: 2rem;
            margin-bottom: 1rem;
            
        }
        h3 {
            font-size: 1.4rem;
            color: white !important;
        }
        
        /* Button styling */
        .stButton > button {
            background: linear-gradient(90deg, #ff7e5f, #feb47b);
            color: white;
            border: none;
            padding: 0.6rem 1.2rem;
            border-radius: 50px;
            font-weight: 600;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 126, 95, 0.4);
        }
        .stButton > button:hover {
            transform: translateY(-3px);
            box-shadow: 0 7px 15px rgba(255, 126, 95, 0.6);
            background: linear-gradient(90deg, #feb47b, #ff7e5f);
        }
        .stButton > button:active {
            transform: translateY(1px);
        }
        
        /* Input fields */
        .stTextInput > div > div > input,
        .stTextArea > div > div > textarea {
            background-color: rgba(30, 30, 30, 0.6) !important;
            border: 1px solid rgba(255, 126, 95, 0.3) !important;
            border-radius: 8px !important;
            color: white !important;
            padding: 12px !important;
            transition: all 0.3s ease;
        }
        .stTextInput > div > div > input:focus,
        .stTextArea > div > div > textarea:focus {
            border-color: #ff7e5f !important;
            box-shadow: 0 0 0 2px rgba(255, 126, 95, 0.2) !important;
        }
        
        /* File uploader */
        .stFileUploader > div > button {
            background: linear-gradient(90deg, #ff7e5f, #feb47b);
            color: white;
        }
        .stFileUploader > div {
            border: 2px dashed rgba(255, 126, 95, 0.5);
            border-radius: 10px;
            padding: 20px;
        }
        
        /* Audio player */
        audio {
            width: 100%;
            border-radius: 30px;
            background-color: rgba(40, 40, 40, 0.8);
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.4);
        }
        audio::-webkit-media-controls-panel {
            background: linear-gradient(45deg, #333333, #1A1A1A);
        }
        audio::-webkit-media-controls-play-button {
            background-color: #ff7e5f;
            border-radius: 50%;
        }
        audio::-webkit-media-controls-timeline,
        audio::-webkit-media-controls-volume-slider {
            background: linear-gradient(90deg, #ff7e5f, #feb47b);
            border-radius: 15px;
            height: 4px;
        }
        
        /* Music card styling */
        .music-card {
            background: rgba(30, 30, 30, 0.7);
            border-radius: 12px;
            padding: 15px;
            margin-bottom: 20px;
            border-left: 4px solid #ff7e5f;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
        }
        .music-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }
        
        /* Toggle switch */
        .css-16h7emx {
            color: rgba(250, 250, 250, 0.8) !important;
        }
        
        /* Radio buttons and checkboxes */
        .stRadio > div[role="radiogroup"] > label,
        .stCheckbox > label {
            color: white !important;
        }
        
        /* Loading spinner */
        .stSpinner > div {
            border-top-color: #ff7e5f !important;
        }
        
        /* Section dividers */
        hr {
            border: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, rgba(255, 126, 95, 0.5), transparent);
            margin: 2rem 0;
        }
        
        /* Status messages */
        .stAlert {
            background-color: rgba(30, 30, 30, 0.7) !important;
            border-left: 4px solid;
            border-radius: 8px;
        }
        .element-container:has(.stAlert) {
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* Menu styling for option menu */
        .nav-link {
            margin: 5px 0 !important;
            border-radius: 8px !important;
            transition: all 0.3s ease !important;
        }
        .nav-link:hover {
            background-color: rgba(255, 126, 95, 0.2) !important;
        }
        .nav-link-selected {
            background: linear-gradient(90deg, #ff7e5f, #feb47b) !important;
            box-shadow: 0 4px 10px rgba(255, 126, 95, 0.4) !important;
        }
        
        /* Custom animations */
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        .pulse-effect {
            animation: pulse 2s infinite;
        }
        
        /* Custom containers for sections */
        .custom-container {
            background: rgba(30, 30, 30, 0.7);
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            border: 1px solid rgba(255, 126, 95, 0.2);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }
        
        /* Metric styling */
        [data-testid="stMetricValue"] {
            font-size: 2.5rem !important;
            background: linear-gradient(90deg, #ff7e5f, #feb47b);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        [data-testid="stMetricLabel"] {
            color: rgba(255, 255, 255, 0.8) !important;
        }
        
        /* Info box */
        .info-box {
            background: rgba(255, 126, 95, 0.1);
            border-radius: 10px;
            padding: 15px;
            border-left: 4px solid #ff7e5f;
            margin: 15px 0;
        }
        
        /* Glassmorphism elements */
        .glass-effect {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
    </style>
    """,
    unsafe_allow_html=True
)
# # CSS n√¢ng cao cho giao di·ªán
# st.markdown(
#     """
#     <style>
#         /* Thi·∫øt l·∫≠p n·ªÅn v√† font ch·ªØ chung */
#         body, .stApp {
#             # background: linear-gradient(135deg, #0E0808 0%, #1A1A1A 100%) !important;
#             background: url("https://i.imgur.com/vzl5Tex.png") no-repeat center center fixed;
#             background-size: cover !important;
#             font-family: 'Roboto', sans-serif;
#             color: #FFFFFF;
#         }

        
#         /* Custom scrollbar */
#         ::-webkit-scrollbar {
#             width: 10px;
#             background: rgba(0, 0, 0, 0.1);
#         }
#         ::-webkit-scrollbar-thumb {
#             background: linear-gradient(45deg, #ff7e5f, #feb47b);
#             border-radius: 10px;
#         }
        
#         /* Sidebar styling */
#         [data-testid="stSidebar"] {
#             background: rgba(10, 10, 10, 0.8) !important;
#             backdrop-filter: blur(10px);
#             border-right: 1px solid rgba(255, 255, 255, 0.1);
#             box-shadow: 5px 0 15px rgba(0, 0, 0, 0.2);
#         }
#         [data-testid="stSidebar"] .css-1d391kg {
#             padding-top: 2rem;
#         }
        
#         /* Header styles */
#         h1, h2, h3 {
#             background: linear-gradient(90deg, #ff7e5f, #feb47b);
#             -webkit-background-clip: text;
#             -webkit-text-fill-color: transparent;
#             font-weight: 700;
#         }
#         h1 {
#             font-size: 2.5rem;
#             margin-bottom: 1.5rem;
#             text-align: center;
#         }
#         h2 {
#             font-size: 1.8rem;
#             margin-top: 2rem;
#             margin-bottom: 1rem;
#         }
#         h3 {
#             font-size: 1.4rem;
#         }
        
#         /* Button styling */
#         .stButton > button {
#             background: linear-gradient(90deg, #ff7e5f, #feb47b);
#             color: white;
#             border: none;
#             padding: 0.6rem 1.2rem;
#             border-radius: 50px;
#             font-weight: 600;
#             letter-spacing: 0.5px;
#             transition: all 0.3s ease;
#             box-shadow: 0 4px 15px rgba(255, 126, 95, 0.4);
#         }
#         .stButton > button:hover {
#             transform: translateY(-3px);
#             box-shadow: 0 7px 15px rgba(255, 126, 95, 0.6);
#             background: linear-gradient(90deg, #feb47b, #ff7e5f);
#         }
#         .stButton > button:active {
#             transform: translateY(1px);
#         }
        
#         /* Input fields */
#         .stTextInput > div > div > input,
#         .stTextArea > div > div > textarea {
#             background-color: rgba(30, 30, 30, 0.6) !important;
#             border: 1px solid rgba(255, 126, 95, 0.3) !important;
#             border-radius: 8px !important;
#             color: white !important;
#             padding: 12px !important;
#             transition: all 0.3s ease;
#         }
#         .stTextInput > div > div > input:focus,
#         .stTextArea > div > div > textarea:focus {
#             border-color: #ff7e5f !important;
#             box-shadow: 0 0 0 2px rgba(255, 126, 95, 0.2) !important;
#         }
        
#         /* File uploader */
#         .stFileUploader > div > button {
#             background: linear-gradient(90deg, #ff7e5f, #feb47b);
#             color: white;
#         }
#         .stFileUploader > div {
#             border: 2px dashed rgba(255, 126, 95, 0.5);
#             border-radius: 10px;
#             padding: 20px;
#         }
        
#         /* Audio player */
#         audio {
#             width: 100%;
#             border-radius: 30px;
#             background-color: rgba(40, 40, 40, 0.8);
#             box-shadow: 0 0 15px rgba(0, 0, 0, 0.4);
#         }
#         audio::-webkit-media-controls-panel {
#             background: linear-gradient(45deg, #333333, #1A1A1A);
#         }
#         audio::-webkit-media-controls-play-button {
#             background-color: #ff7e5f;
#             border-radius: 50%;
#         }
#         audio::-webkit-media-controls-timeline,
#         audio::-webkit-media-controls-volume-slider {
#             background: linear-gradient(90deg, #ff7e5f, #feb47b);
#             border-radius: 15px;
#             height: 4px;
#         }
        
#         /* Music card styling */
#         .music-card {
#             background: rgba(30, 30, 30, 0.7);
#             border-radius: 12px;
#             padding: 15px;
#             margin-bottom: 20px;
#             border-left: 4px solid #ff7e5f;
#             box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
#             transition: all 0.3s ease;
#         }
#         .music-card:hover {
#             transform: translateY(-5px);
#             box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
#         }
        
#         /* Toggle switch */
#         .css-16h7emx {
#             color: rgba(250, 250, 250, 0.8) !important;
#         }
        
#         /* Radio buttons and checkboxes */
#         .stRadio > div[role="radiogroup"] > label,
#         .stCheckbox > label {
#             color: white !important;
#         }
        
#         /* Loading spinner */
#         .stSpinner > div {
#             border-top-color: #ff7e5f !important;
#         }
        
#         /* Section dividers */
#         hr {
#             border: 0;
#             height: 1px;
#             background: linear-gradient(90deg, transparent, rgba(255, 126, 95, 0.5), transparent);
#             margin: 2rem 0;
#         }
        
#         /* Status messages */
#         .stAlert {
#             background-color: rgba(30, 30, 30, 0.7) !important;
#             border-left: 4px solid;
#             border-radius: 8px;
#         }
#         .element-container:has(.stAlert) {
#             animation: fadeIn 0.5s ease-in-out;
#         }
#         @keyframes fadeIn {
#             from { opacity: 0; transform: translateY(10px); }
#             to { opacity: 1; transform: translateY(0); }
#         }
        
#         /* Menu styling for option menu */
#         .nav-link {
#             margin: 5px 0 !important;
#             border-radius: 8px !important;
#             transition: all 0.3s ease !important;
#         }
#         .nav-link:hover {
#             background-color: rgba(255, 126, 95, 0.2) !important;
#         }
#         .nav-link-selected {
#             background: linear-gradient(90deg, #ff7e5f, #feb47b) !important;
#             box-shadow: 0 4px 10px rgba(255, 126, 95, 0.4) !important;
#         }
        
#         /* Custom animations */
#         @keyframes pulse {
#             0% { transform: scale(1); }
#             50% { transform: scale(1.05); }
#             100% { transform: scale(1); }
#         }
#         .pulse-effect {
#             animation: pulse 2s infinite;
#         }
        
#         /* Custom containers for sections */
#         .custom-container {
#             background: rgba(30, 30, 30, 0.7);
#             border-radius: 15px;
#             padding: 20px;
#             margin: 20px 0;
#             border: 1px solid rgba(255, 126, 95, 0.2);
#             box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
#         }
        
#         /* Metric styling */
#         [data-testid="stMetricValue"] {
#             font-size: 2.5rem !important;
#             background: linear-gradient(90deg, #ff7e5f, #feb47b);
#             -webkit-background-clip: text;
#             -webkit-text-fill-color: transparent;
#         }
#         [data-testid="stMetricLabel"] {
#             color: rgba(255, 255, 255, 0.8) !important;
#         }
        
#         /* Info box */
#         .info-box {
#             background: rgba(255, 126, 95, 0.1);
#             border-radius: 10px;
#             padding: 15px;
#             border-left: 4px solid #ff7e5f;
#             margin: 15px 0;
#         }
        
#         /* Glassmorphism elements */
#         .glass-effect {
#             background: rgba(255, 255, 255, 0.05);
#             backdrop-filter: blur(10px);
#             border-radius: 10px;
#             border: 1px solid rgba(255, 255, 255, 0.1);
#             box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
#         }
#     </style>
#     """,
#     unsafe_allow_html=True
# )

# H√†m m√£ h√≥a email
def encode_email(email):
    return base64.b64encode(email.encode()).decode()

# H√†m gi·∫£i m√£ email
def decode_email(encoded):
    try:
        return base64.b64decode(encoded.encode()).decode()
    except Exception:
        return None

# SIDEBAR NAVIGATION
with st.sidebar:
    st.image("a-minimalist-logo-design-on-a-black-back.jpeg", use_container_width=True)

    # X·ª≠ l√Ω ƒëƒÉng nh·∫≠p v·ªõi cookie
    cookies = CookieManager()

    # Ki·ªÉm tra cookies c√≥ s·∫µn v√† ƒë√£ m√£ h√≥a email
    if cookies.ready() and cookies.get("user_email") and "user" not in st.session_state:
        decoded_email = decode_email(cookies.get("user_email"))
        if decoded_email:
            # üëâ G·ªçi Supabase ƒë·ªÉ l·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß t·ª´ email
            profile_data = supabase.table("user_profiles").select("*").eq("email", decoded_email).execute()
            if profile_data.data:
                profile = profile_data.data[0]
                st.session_state["user"] = {
                    "id": profile["id"],
                    "email": profile["email"],
                    "full_name": profile.get("full_name", ""),
                    "role": profile.get("role", "client"),
                    "created_at": profile.get("created_at", "")
                }

    # KHO·∫¢NG TAI KHO·∫¢N (AUTH)
    if "user" not in st.session_state:
        st.markdown("""
            <div class="custom-container" style="padding: 15px; margin-bottom: 20px;">
                <h3 style="margin-top: 0; font-size: 18px; text-align: center;">
                    üîê T√†i kho·∫£n
                </h3>
        """, unsafe_allow_html=True)
        
        auth_menu = st.radio("", ["ƒêƒÉng nh·∫≠p", "ƒêƒÉng k√Ω", "Qu√™n m·∫≠t kh·∫©u"], horizontal=True, label_visibility="collapsed")
        
        if auth_menu == "ƒêƒÉng k√Ω":
            st.markdown('<p style="font-weight: 600; font-size: 16px; margin-bottom: 10px;">‚úçÔ∏è ƒêƒÉng k√Ω t√†i kho·∫£n</p>', unsafe_allow_html=True)
            
            email = st.text_input("Email", type="default", placeholder="your.email@example.com")
            password = st.text_input("M·∫≠t kh·∫©u", type="password", placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢")
            full_name = st.text_input("H·ªç t√™n", placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n")
            
            if st.button("üöÄ ƒêƒÉng k√Ω"):
                from auth import register_user
                success, msg = register_user(email, password, full_name)
                if success:
                    st.success(msg)
                    st.info("üìß Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ ƒë·ªÉ x√°c minh t√†i kho·∫£n tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p.")
                else:
                    st.error(msg)

        elif auth_menu == "ƒêƒÉng nh·∫≠p":
            st.markdown('<p style="font-weight: 600; font-size: 16px; margin-bottom: 10px;">üîë ƒêƒÉng nh·∫≠p</p>', unsafe_allow_html=True)
            
            email = st.text_input("Email ƒëƒÉng nh·∫≠p", placeholder="your.email@example.com")
            password = st.text_input("M·∫≠t kh·∫©u", type="password", placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢")
            
            if st.button("üîì ƒêƒÉng nh·∫≠p"):
                from auth import login_user
                success, msg = login_user(email, password)
                if success:
                    cookies["user_email"] = encode_email(email)
                    cookies["user_id"] = st.session_state["user"]["id"]
                    cookies.save()
                    st.success(msg)
                    st.rerun()
                else:
                    st.error(msg)

        elif auth_menu == "Qu√™n m·∫≠t kh·∫©u":
            st.markdown('<p style="font-weight: 600; font-size: 16px; margin-bottom: 10px;">üìß ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</p>', unsafe_allow_html=True)
            
            email = st.text_input("Nh·∫≠p email ƒë√£ ƒëƒÉng k√Ω", placeholder="your.email@example.com")
            
            if st.button("G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u"):
                from auth import supabase
                try:
                    res = supabase.auth.reset_password_for_email(email)
                    st.success("üì¨ ƒê√£ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ ƒë·∫øn.")
                except Exception as e:
                    st.error(f"‚ùå L·ªói khi g·ª≠i email: {e}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    else:
        # HI·ªÇN TH·ªä TH√îNG TIN NG∆Ø·ªúI D√ôNG ƒê√É ƒêƒÇNG NH·∫¨P
        full_name = st.session_state["user"].get("full_name", "b·∫°n")
        
        # L·∫•y th√¥ng tin credits
        user_id = st.session_state["user"]["id"]
        credit_data = supabase.table("user_credits").select("credits").eq("id", user_id).execute()
        credits = credit_data.data[0]["credits"] if credit_data.data else 0
        
        st.markdown(f"""
            <div class="custom-container" style="padding: 15px; margin-bottom: 20px;">
                <div style="display: flex; align-items: center; margin-bottom: 15px;">
                    <div style="
                        width: 40px;
                        height: 40px;
                        border-radius: 50%;
                        background: linear-gradient(45deg, #ff7e5f, #feb47b);
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        margin-right: 10px;
                        font-weight: bold;
                        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
                        ">{full_name[0].upper()}</div>
                    <div>
                        <div style="font-weight: bold;">üëã {full_name}</div>
                        <div style="font-size: 0.9rem; opacity: 0.7;">{st.session_state["user"]["email"]}</div>
                    </div>
                </div>
                
            <div style="
                background: linear-gradient(45deg, rgba(255,126,95,0.2), rgba(254,180,123,0.2));
                padding: 10px;
                border-radius: 8px;
                display: flex;
                align-items: center;
                margin-bottom: 15px;">
                <span style="font-size: 24px; margin-right: 10px;">üíé</span>
                <div>
                    <div style="font-size: 0.9rem; opacity: 0.8;">T√≠n d·ª•ng hi·ªán c√≥</div>
                    <div style="font-weight: bold;">{credits:,} credits</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # if st.button("üö™ ƒêƒÉng xu·∫•t", key="logout_button"):
        #     del cookies["user_email"]
        #     del st.session_state['user']
        #     cookies.save()
        #     st.success("‚úÖ ƒê√£ ƒëƒÉng xu·∫•t.")
        #     st.rerun()
            
        st.markdown('</div>', unsafe_allow_html=True)
    
    menu = option_menu(
        menu_title=None,
        options=["Home", "Create Lyrics", "Feel The Beat", "Classify", "Library", "Payment"],
        icons=["house", "music-note-list", "soundwave", "graph-up", "book", "credit-card"],
        menu_icon="menu-button-wide",
        default_index=0,
        styles={
            "container": {"background-color": "rgba(30,30,30,0.7)", "padding": "10px", "border-radius": "15px"},
            "icon": {"color": "#ff7e5f", "font-size": "18px"},
            "nav-link": {"font-size": "16px", "color": "#ffffff", "text-align": "left", "margin": "5px", "border-radius": "8px", "padding": "10px"},
            "nav-link-selected": {"background": "linear-gradient(90deg, #ff7e5f, #feb47b)"},
        }
    )
    if "user" in st.session_state:
        if st.button("üö™ ƒêƒÉng xu·∫•t", key="logout_button"):
            del cookies["user_email"]
            del st.session_state['user']
            cookies.save()
            st.success("‚úÖ ƒê√£ ƒëƒÉng xu·∫•t.")
            st.rerun()

        
        # Hi·ªÉn th·ªã chatbot
        display_chatbot()


# üö´ Ch·∫∑n menu n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
protected_menus = ["Create Lyrics", "Feel The Beat", "Classify", "Explore", "Library","Qu·∫£n l√Ω thanh to√°n"]

if menu in protected_menus and "user" not in st.session_state:
    st.markdown("""
        <div class="custom-container" style="text-align: center; padding: 40px 20px;">
            <div style="font-size: 60px; margin-bottom: 20px;">üîí</div>
            <h2 style="margin-bottom: 20px;">Vui l√≤ng ƒëƒÉng nh·∫≠p</h2>
            <p style="margin-bottom: 30px; color: rgba(255,255,255,0.7);">
                B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p ch·ª©c nƒÉng n√†y.
            </p>
            <div style="
                background: linear-gradient(45deg, rgba(255,126,95,0.2), rgba(254,180,123,0.2));
                padding: 15px;
                border-radius: 10px;
                max-width: 400px;
                margin: 0 auto;
                ">
                <p>üëâ S·ª≠ d·ª•ng form ƒëƒÉng nh·∫≠p ·ªü menu b√™n tr√°i ƒë·ªÉ ti·∫øp t·ª•c.</p>
            </div>
        </div>
    """, unsafe_allow_html=True)
    st.stop()

def handle_empty_title(music_data):
    """Ki·ªÉm tra v√† ƒëi·ªÅn t√™n b√†i h√°t n·∫øu b·ªã r·ªóng."""
    for song in music_data:
        if isinstance(song, dict):  # Ki·ªÉm tra xem song c√≥ ph·∫£i l√† dictionary kh√¥ng
            # Ki·ªÉm tra n·∫øu thi·∫øu audioUrl ho·∫∑c imageUrl
            if not song.get('audioUrl'):
                song['audioUrl'] = "https://default-audio-url.com"  # ƒê·∫∑t URL m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu audioUrl
            if not song.get('imageUrl'):
                song['imageUrl'] = "https://default-image-url.com"  # ƒê·∫∑t URL m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu imageUrl

            # Ki·ªÉm tra n·∫øu thi·∫øu title
            if not song.get('title'):
                song['title'] = f"Track {song.get('id', 'Unknown')}"  # ƒê·∫∑t t√™n m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ title
                log_error(f"B√†i h√°t v·ªõi ID {song.get('id', 'Unknown')} thi·∫øu title. ƒê·∫∑t t√™n m·∫∑c ƒë·ªãnh.")
        else:
            log_error(f"D·ªØ li·ªáu b√†i h√°t kh√¥ng h·ª£p l·ªá: {song}")
    return music_data

# X·ª≠ l√Ω logic theo l·ª±a ch·ªçn trong menu
if menu == "Home":
    show_home()
elif menu == "Create Lyrics":
    create_lyrics()
elif menu == "Feel The Beat":
    asyncio.run(Feel_The_Beat()) 
elif menu == "Classify":
    classify_music()
elif menu == "Library":
    show_library()
elif menu == "Payment":
    manage_payment()
